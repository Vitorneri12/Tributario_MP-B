// Modern JavaScript for enhanced user experience - Tax Law Specialized
// Google Tag Manager DataLayer
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}

// Track page view
gtag('event', 'page_view', {
    'event_category': 'engagement',
    'event_label': 'tributario_page',
    'page_title': document.title,
    'page_location': window.location.href
});

document.addEventListener('DOMContentLoaded', function() {
    // Track page entrance
    gtag('event', 'page_entrance', {
        'event_category': 'engagement',
        'event_label': 'tributario_entrance',
        'value': 1
    });
    // Add scrolled class to header on scroll
    const header = document.querySelector('.header');

    window.addEventListener('scroll', () => {
        if (window.scrollY > 100) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }
    });

    // Smooth scroll for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                const headerHeight = header.offsetHeight;
                const targetPosition = target.offsetTop - headerHeight;

                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });

    // Initialize chatbot after DOM is loaded
    initializeChatbot();
});

// Initialize chatbot functionality
function initializeChatbot() {
    const chatbotInput = document.getElementById('chatbot-input-field');
    if (chatbotInput) {
        chatbotInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Focus input when chatbot opens
        const chatbotButton = document.querySelector('.chatbot-button');
        if (chatbotButton) {
            chatbotButton.addEventListener('click', () => {
                setTimeout(() => {
                    const container = document.getElementById('chatbot-container');
                    if (container && container.classList.contains('active')) {
                        chatbotInput.focus();
                    }
                }, 300);
            });
        }
    }
}

// Mobile menu toggle (for future mobile menu implementation)
const createMobileMenu = () => {
    const navbar = document.querySelector('.navbar');
    const mobileToggle = document.createElement('button');
    mobileToggle.className = 'mobile-toggle';
    mobileToggle.innerHTML = '<i class="fas fa-bars"></i>';

    // Insert mobile toggle before navbar
    navbar.parentNode.insertBefore(mobileToggle, navbar);

    mobileToggle.addEventListener('click', () => {
        navbar.classList.toggle('mobile-active');
        const icon = mobileToggle.querySelector('i');
        if (navbar.classList.contains('mobile-active')) {
            icon.className = 'fas fa-times';
        } else {
            icon.className = 'fas fa-bars';
        }
    });
};

// Form submission handler for consultation form
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.hero-form form');
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();

            // Get form data
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);

            // Simple validation
            const requiredFields = ['nome', 'email', 'telefone', 'servico'];
            let isValid = true;

            requiredFields.forEach(field => {
                const input = document.getElementById(field);
                if (!data[field] || data[field].trim() === '') {
                    input.style.borderColor = '#dc2626';
                    isValid = false;
                } else {
                    input.style.borderColor = '#e0e0e0';
                }
            });

            // Email validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            const emailInput = document.getElementById('email');
            if (data.email && !emailRegex.test(data.email)) {
                emailInput.style.borderColor = '#dc2626';
                isValid = false;
            }

            if (isValid) {
                // Track form submission
                gtag('event', 'form_submit', {
                    'event_category': 'lead_generation',
                    'event_label': 'consultation_form',
                    'service_type': data.servico,
                    'value': 10
                });

                // Show success message
                const button = this.querySelector('.btn');
                const originalText = button.textContent;
                button.textContent = 'Enviando...';
                button.disabled = true;

                // Simulate form submission
                setTimeout(() => {
                    // Track successful form completion
                    gtag('event', 'form_complete', {
                        'event_category': 'lead_generation',
                        'event_label': 'consultation_success',
                        'value': 50
                    });

                    alert('Mensagem enviada com sucesso! Entraremos em contato em breve.');
                    this.reset();
                    button.textContent = originalText;
                    button.disabled = false;
                }, 1500);
            } else {
                // Track form validation error
                gtag('event', 'form_error', {
                    'event_category': 'form_interaction',
                    'event_label': 'validation_error',
                    'value': 1
                });

                alert('Por favor, preencha todos os campos obrigatÃ³rios corretamente.');
            }
        });
    }
});

// Animate elements on scroll
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
        }
    });
}, observerOptions);

// Observe service cards and benefit items
document.addEventListener('DOMContentLoaded', () => {
    const animateElements = document.querySelectorAll('.service-card, .benefit-item, .contact-item');

    animateElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(30px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(el);
    });

    // Initialize mobile menu for smaller screens
    if (window.innerWidth <= 768) {
        createMobileMenu();
    }

    // Add resize listener for mobile menu
    window.addEventListener('resize', () => {
        const existingToggle = document.querySelector('.mobile-toggle');
        if (window.innerWidth <= 768 && !existingToggle) {
            createMobileMenu();
        } else if (window.innerWidth > 768 && existingToggle) {
            existingToggle.remove();
            document.querySelector('.navbar').classList.remove('mobile-active');
        }
    });
});

// Counter animation for stats
const animateCounters = () => {
    const counters = document.querySelectorAll('.stat-number');

    counters.forEach(counter => {
        const target = parseInt(counter.textContent);
        const increment = target / 50;
        let current = 0;

        const timer = setInterval(() => {
            current += increment;
            counter.textContent = Math.floor(current) + '+';

            if (current >= target) {
                counter.textContent = target + '+';
                clearInterval(timer);
            }
        }, 40);
    });
};

// Trigger counter animation when stats section is visible
const statsObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            animateCounters();
            statsObserver.unobserve(entry.target);
        }
    });
}, { threshold: 0.5 });

document.addEventListener('DOMContentLoaded', () => {
    const statsSection = document.querySelector('.stats-container');
    if (statsSection) {
        statsObserver.observe(statsSection);
    }
});

// Add hover effects to service cards
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.service-card').forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.borderTopColor = '#dc2626';
        });

        card.addEventListener('mouseleave', function() {
            this.style.borderTopColor = 'var(--accent-red)';
        });
    });
});


// Chatbot functionality
function toggleChatbot() {
    const container = document.getElementById('chatbot-container');
    const isOpening = !container.classList.contains('active');

    container.classList.toggle('active');

    // Track chatbot interaction
    if (isOpening) {
        gtag('event', 'chatbot_open', {
            'event_category': 'ai_interaction',
            'event_label': 'chatbot_opened',
            'value': 1
        });
    } else {
        gtag('event', 'chatbot_close', {
            'event_category': 'ai_interaction',
            'event_label': 'chatbot_closed',
            'value': 1
        });
    }
}

function handleChatInput(event) {
    if (event.key === 'Enter') {
        sendMessage();
    }
}

async function sendMessage() {
    const inputField = document.getElementById('chatbot-input-field');
    const message = inputField.value.trim();

    if (!message) return;

    // Disable input while processing
    inputField.disabled = true;
    const sendButton = inputField.nextElementSibling;
    sendButton.disabled = true;

    // Track chatbot message
    gtag('event', 'chatbot_message', {
        'event_category': 'ai_interaction',
        'event_label': 'user_message_sent',
        'message_length': message.length,
        'value': 1
    });

    // Add user message
    addMessage(message, 'user');
    inputField.value = '';

    // Show typing indicator
    showTypingIndicator();

    // Get bot response (async)
    try {
        const botResponse = await getBotResponse(message);
        hideTypingIndicator();
        addMessage(botResponse, 'bot');

        // Track successful bot response
        gtag('event', 'chatbot_response', {
            'event_category': 'ai_interaction',
            'event_label': 'bot_response_success',
            'response_length': botResponse.length,
            'value': 1
        });
    } catch (error) {
        console.error('Erro ao enviar mensagem:', error);
        hideTypingIndicator();
        addMessage('Desculpe, houve um erro. Tente novamente em instantes.', 'bot');

        // Track bot error
        gtag('event', 'chatbot_error', {
            'event_category': 'ai_interaction',
            'event_label': 'bot_response_error',
            'error_message': error.message || 'Unknown error',
            'value': 1
        });
    } finally {
        // Re-enable input
        inputField.disabled = false;
        sendButton.disabled = false;
        inputField.focus();
    }
}

function addMessage(text, sender) {
    const messagesContainer = document.getElementById('chatbot-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;

    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';

    // Handle line breaks and formatting
    const formattedText = text.replace(/\n/g, '<br>');
    messageContent.innerHTML = formattedText;

    messageDiv.appendChild(messageContent);
    messagesContainer.appendChild(messageDiv);

    // Smooth scroll to bottom
    setTimeout(() => {
        messagesContainer.scrollTo({
            top: messagesContainer.scrollHeight,
            behavior: 'smooth'
        });
    }, 100);
}

// Tax Law Chatbot with Specialized Responses
const CHATBOT_CONFIG = {
    // Context do escritÃ³rio para IA - SISTEMA ESPECIALIZADO EM DIREITO TRIBUTÃRIO
    SYSTEM_CONTEXT: `VocÃª Ã© Clara, assistente virtual EXCLUSIVAMENTE do escritÃ³rio de advocacia tributÃ¡ria Martins Palmeira e Bergamo.

âï¸ FOCO OBRIGATÃRIO: APENAS DIREITO TRIBUTÃRIO EMPRESARIAL

INFORMAÃÃES DO ESCRITÃRIO:
- EspecializaÃ§Ã£o: EXCLUSIVAMENTE Direito TributÃ¡rio Empresarial
- LocalizaÃ§Ã£o: Swiss Park Office - Av. Antonio Artioli, 570, Sala 108, Campinas-SP
- WhatsApp: (19) 99863-0306
- Email: contato@martinspalmeiraebergamo.com.br
- HorÃ¡rio: Seg-Sex: 9h-18h + PlantÃ£o WhatsApp 24h
- ExperiÃªncia: 15+ anos, 500+ casos tributÃ¡rios, 200+ empresas

SERVIÃOS ESPECIALIZADOS:
1. RecuperaÃ§Ã£o de Impostos Pagos a Maior (ICMS, IPI, PIS/COFINS, ISS)
2. CompensaÃ§Ã£o de CrÃ©ditos TributÃ¡rios (aproveitamento de crÃ©ditos)
3. Advogado Tributarista Empresarial (planejamento e consultoria)
4. Defesa em AutuaÃ§Ãµes Fiscais (Receita Federal, Estadual, Municipal)
5. Consultoria TributÃ¡ria Preventiva (compliance fiscal)
6. Auditoria TributÃ¡ria (revisÃ£o de passivos)

REGRAS RÃGIDAS - NUNCA VIOLE:
ð¨ RESPONDA APENAS sobre: direito tributÃ¡rio, impostos, ICMS, IPI, PIS/COFINS, ISS, IR, autuaÃ§Ãµes fiscais, Receita Federal, planejamento tributÃ¡rio, consultoria fiscal
ð¨ JAMAIS responda sobre: direito trabalhista, civil, criminal, famÃ­lia, consumidor
ð¨ Se perguntarem sobre outros assuntos: "Sou especializada exclusivamente em direito tributÃ¡rio empresarial. Para outras questÃµes jurÃ­dicas, recomendo contatar um escritÃ³rio generalista. Posso ajudÃ¡-lo com questÃµes tributÃ¡rias?"
ð¨ NÃ£o forneÃ§a consultoria especÃ­fica - sempre direcione para consulta
ð¨ Seja tÃ©cnica mas acessÃ­vel
ð¨ MÃ¡ximo 3 frases por resposta
ð¨ Sempre ofereÃ§a contato: WhatsApp (19) 99863-0306`
};

// SISTEMA DE VALIDAÃÃO PARA TÃPICOS TRIBUTÃRIOS
function isTaxLawTopic(message) {
    const taxKeywords = [
        // Termos diretos de direito tributÃ¡rio
        'tributÃ¡rio', 'tributÃ¡ria', 'tributo', 'imposto', 'taxa', 'contribuiÃ§Ã£o',
        'icms', 'ipi', 'pis', 'cofins', 'iss', 'ir', 'irpj', 'csll', 'inss',
        'receita federal', 'receita estadual', 'prefeitura', 'fisco', 'fiscal',
        'autuaÃ§Ã£o', 'auto de infraÃ§Ã£o', 'multa fiscal', 'notificaÃ§Ã£o fiscal',
        'compensaÃ§Ã£o', 'crÃ©dito tributÃ¡rio', 'restituiÃ§Ã£o', 'ressarcimento',
        'planejamento tributÃ¡rio', 'elisÃ£o fiscal', 'consultoria fiscal',
        'auditoria tributÃ¡ria', 'passivo tributÃ¡rio', 'contingÃªncia fiscal',
        'parcelamento', 'refis', 'pert', 'paes', 'recuperaÃ§Ã£o judicial',
        'simples nacional', 'lucro presumido', 'lucro real', 'arbitrado',
        'substituiÃ§Ã£o tributÃ¡ria', 'antecipaÃ§Ã£o tributÃ¡ria', 'diferimento',
        // Termos do escritÃ³rio
        'martins palmeira', 'bergamo', 'advocacia', 'advogado', 'escritÃ³rio',
        'consulta', 'serviÃ§os', 'contrato', 'whatsapp', 'telefone', 'contato'
    ];

    const nonTaxKeywords = [
        // Direito Trabalhista
        'trabalhista', 'trabalho', 'clt', 'empregado', 'funcionÃ¡rio', 'demissÃ£o',
        // Direito Civil
        'divÃ³rcio', 'separaÃ§Ã£o', 'inventÃ¡rio', 'heranÃ§a',
        // Direito Criminal
        'crime', 'prisÃ£o', 'delegacia',
        // Outros
        'consumidor', 'procon'
    ];

    const messageLower = message.toLowerCase().trim();

    // SAUDAÃÃES E PERGUNTAS GERAIS - SEMPRE ACEITAR
    const basicGreetings = /^(ol[aÃ¡]|oi|hello|hey|e a[iÃ­]|blz|tudo bem|bom dia|boa tarde|boa noite)[\s\!]*$/i.test(messageLower);
    const basicQuestions = /\b(como|onde|quando|quanto|que|qual|quem|por que|porque|o que|ajuda|ajudar|info|informa[Ã§c][Ã£a]o|dÃºvida|d[uÃº]vida|pergunta)\b/i.test(messageLower);
    const serviceQuestions = /\b(servi[Ã§c]os?|atua[Ã§c][Ã£a]o|especialidade|fazem|trabalham|oferecem|atendimento)\b/i.test(messageLower);
    const contactQuestions = /\b(contato|telefone|whatsapp|falar|ligar|email|endere[Ã§c]o|localiza[Ã§c][Ã£a]o|fica)\b/i.test(messageLower);

    // Se Ã© saudaÃ§Ã£o bÃ¡sica ou pergunta geral, sempre aceitar
    if (basicGreetings || basicQuestions || serviceQuestions || contactQuestions) {
        return true;
    }

    // Se contÃ©m palavras explicitamente proibidas, rejeitar
    const hasNonTaxKeywords = nonTaxKeywords.some(keyword =>
        messageLower.includes(keyword)
    );

    if (hasNonTaxKeywords) return false;

    // Se contÃ©m palavras tributÃ¡rias especÃ­ficas, aceitar
    const hasTaxKeywords = taxKeywords.some(keyword =>
        messageLower.includes(keyword)
    );

    if (hasTaxKeywords) return true;

    // Para mensagens muito curtas (atÃ© 3 palavras), aceitar (provavelmente saudaÃ§Ãµes)
    if (messageLower.split(' ').length <= 3) return true;

    // Para outras mensagens, aceitar por padrÃ£o (serÃ£o redirecionadas se necessÃ¡rio)
    return true;
}

// FunÃ§Ã£o principal para obter resposta do bot
async function getBotResponse(userMessage) {
    try {
        console.log('Mensagem recebida:', userMessage);

        // Pequeno delay para simular digitaÃ§Ã£o
        await new Promise(resolve => setTimeout(resolve, 300));

        // Usar respostas locais especializadas em tributÃ¡rio
        const response = getTaxBotResponseLocal(userMessage);

        console.log('Resposta gerada:', response);
        return response;

    } catch (error) {
        console.error('Erro no chatbot:', error);
        // Resposta de erro mais amigÃ¡vel
        return 'Oi! Tive um probleminha tÃ©cnico, mas estou aqui para ajudar com questÃµes tributÃ¡rias! Pode repetir sua pergunta ou entrar em contato pelo WhatsApp (19) 99863-0306.';
    }
}

// CHATBOT ESPECIALIZADO EM DIREITO TRIBUTÃRIO
function getTaxBotResponseLocal(userMessage) {
    const message = userMessage.toLowerCase().trim();
    console.log('Processando mensagem tributÃ¡ria:', message);

    // SaudaÃ§Ãµes - PRIMEIRA PRIORIDADE
    if (message.includes('ola') || message.includes('olÃ¡') || message.includes('oi') ||
        message.includes('bom dia') || message.includes('boa tarde') || message.includes('boa noite') ||
        message.includes('hello') || message.includes('hey')) {
        const greetings = [
            'OlÃ¡! Sou Clara, assistente do escritÃ³rio Martins Palmeira e Bergamo. Como posso ajudÃ¡-lo com questÃµes tributÃ¡rias?',
            'Oi! Somos especialistas em direito tributÃ¡rio empresarial. Pode me contar sua dÃºvida fiscal que vou orientÃ¡-lo!',
            'OlÃ¡! Tem alguma dÃºvida sobre impostos ou questÃµes tributÃ¡rias? Estou aqui para ajudar!',
            'Oi! Sou Clara do escritÃ³rio tributÃ¡rio Martins Palmeira e Bergamo. Como posso ajudÃ¡-lo hoje?'
        ];
        return greetings[Math.floor(Math.random() * greetings.length)];
    }

    // Perguntas sobre saber/conhecer/dÃºvidas
    if (message.includes('gostaria de saber') || message.includes('quero saber') ||
        message.includes('duvida') || message.includes('dÃºvida') || message.includes('pergunta') ||
        message.includes('me tire') || message.includes('esclareÃ§a') || message.includes('explique')) {
        return 'Claro! Estou aqui para esclarecer dÃºvidas sobre direito tributÃ¡rio. Pode perguntar sobre impostos, autuaÃ§Ãµes fiscais, recuperaÃ§Ã£o de crÃ©ditos, ou nossos serviÃ§os. O que vocÃª gostaria de saber?';
    }

    // Perguntas sobre ajuda
    if (message.includes('ajuda') || message.includes('ajudar') || message.includes('me ajude') ||
        message.includes('preciso de') || message.includes('como vocÃª') || message.includes('pode')) {
        return 'Claro! Posso ajudÃ¡-lo com questÃµes tributÃ¡rias: recuperaÃ§Ã£o de impostos, defesa em autuaÃ§Ãµes, planejamento fiscal, consultoria tributÃ¡ria. Qual sua dÃºvida especÃ­fica?';
    }

    // ServiÃ§os
    if (message.includes('serviÃ§o') || message.includes('fazem') || message.includes('trabalham') ||
        message.includes('especialidade') || message.includes('oferecem')) {
        return 'Nossos serviÃ§os tributÃ¡rios:\n\nð° RECUPERAÃÃO de impostos pagos a maior\nð¡ï¸ DEFESA em autuaÃ§Ãµes fiscais\nð CONSULTORIA tributÃ¡ria preventiva\nâï¸ PLANEJAMENTO tributÃ¡rio empresarial\n\nSobre qual vocÃª quer saber mais?';
    }

    // RecuperaÃ§Ã£o de impostos
    if (message.includes('recuperaÃ§Ã£o') || message.includes('recuperar') || message.includes('restituiÃ§Ã£o') ||
        message.includes('ressarcimento') || message.includes('pago a maior') || message.includes('crÃ©dito')) {
        return 'RecuperaÃ§Ã£o de impostos Ã© nossa especialidade! Analisamos ICMS, IPI, PIS/COFINS, ISS pagos indevidamente. Muitas empresas tÃªm direito a milhares em crÃ©ditos. Quer uma anÃ¡lise gratuita? WhatsApp (19) 99863-0306';
    }

    // AutuaÃ§Ãµes fiscais
    if (message.includes('autuaÃ§Ã£o') || message.includes('auto de infraÃ§Ã£o') || message.includes('multa') ||
        message.includes('receita federal') || message.includes('fisco') || message.includes('fiscal')) {
        return 'Defesa em autuaÃ§Ãµes fiscais Ã© fundamental! Analisamos o auto de infraÃ§Ã£o, elaboramos defesa tÃ©cnica e representamos sua empresa junto aos Ã³rgÃ£os fiscais. Prazo Ã© crucial! WhatsApp (19) 99863-0306';
    }

    // Impostos especÃ­ficos
    if (message.includes('icms') || message.includes('ipi') || message.includes('pis') ||
        message.includes('cofins') || message.includes('iss') || message.includes('ir') ||
        message.includes('imposto')) {
        return 'Trabalhamos com todos os impostos empresariais: ICMS, IPI, PIS/COFINS, ISS, IR, CSLL. Oferecemos recuperaÃ§Ã£o, planejamento e defesa. Qual imposto tem gerado dÃºvidas na sua empresa?';
    }

    // Planejamento tributÃ¡rio
    if (message.includes('planejamento') || message.includes('consultoria') || message.includes('preventiva') ||
        message.includes('compliance') || message.includes('elisÃ£o') || message.includes('economia')) {
        return 'Planejamento tributÃ¡rio pode reduzir significativamente sua carga fiscal! Analisamos sua operaÃ§Ã£o e sugerimos estratÃ©gias legais de economia. Consultoria preventiva evita problemas futuros. Vamos conversar? (19) 99863-0306';
    }

    // Contato
    if (message.includes('contato') || message.includes('telefone') || message.includes('whatsapp') ||
        message.includes('email') || message.includes('falar') || message.includes('ligar')) {
        return 'Entre em contato conosco:\nð± WhatsApp: (19) 99863-0306\nð§ Email: contato@martinspalmeiraebergamo.com.br\nð Seg-Sex: 9h-18h + PlantÃ£o 24h\nð Campinas-SP';
    }

    // LocalizaÃ§Ã£o
    if (message.includes('onde') || message.includes('endereÃ§o') || message.includes('localizaÃ§Ã£o') ||
        message.includes('fica') || message.includes('campinas')) {
        return 'Nosso escritÃ³rio fica em Campinas-SP:\nð Swiss Park Office\nð Av. Antonio Artioli, 570\nð EdifÃ­cio Locarno - Sala 108\nð¿ï¸ Estacionamento prÃ³prio';
    }

    // HorÃ¡rios
    if (message.includes('horÃ¡rio') || message.includes('que horas') || message.includes('funciona') ||
        message.includes('aberto') || message.includes('atende')) {
        return 'Nosso horÃ¡rio: Segunda a Sexta das 9h Ã s 18h, mas temos plantÃ£o 24h pelo WhatsApp (19) 99863-0306 para emergÃªncias tributÃ¡rias!';
    }

    // PreÃ§os
    if (message.includes('preÃ§o') || message.includes('valor') || message.includes('quanto') ||
        message.includes('custo') || message.includes('honorÃ¡rio') || message.includes('cobram')) {
        return 'Nossos valores variam conforme a complexidade do caso tributÃ¡rio. Oferecemos consulta inicial para avaliaÃ§Ã£o e orÃ§amento personalizado. Entre em contato pelo WhatsApp (19) 99863-0306!';
    }

    // Agradecimentos
    if (message.includes('obrigad') || message.includes('valeu') || message.includes('agradeÃ§o') ||
        message.includes('muito bom') || message.includes('Ã³timo') || message.includes('perfeito')) {
        return 'Fico feliz em ajudar! Tem mais alguma dÃºvida sobre questÃµes tributÃ¡rias? Estou aqui para orientÃ¡-lo!';
    }

    // Resposta padrÃ£o para qualquer outra mensagem
    return 'Entendi sua pergunta! Para uma orientaÃ§Ã£o especÃ­fica sobre sua situaÃ§Ã£o tributÃ¡ria, recomendo falar diretamente com nossos advogados pelo WhatsApp (19) 99863-0306. Assim podemos analisar seu caso detalhadamente!';
}

// FunÃ§Ã£o auxiliar para respostas aleatÃ³rias - COM VALIDAÃÃO
function getRandomResponse(responses) {
    if (!responses || !Array.isArray(responses) || responses.length === 0) {
        console.error('Erro: Array de respostas invÃ¡lido', responses);
        return 'OlÃ¡! Como posso ajudÃ¡-lo com questÃµes tributÃ¡rias?';
    }

    const randomIndex = Math.floor(Math.random() * responses.length);
    const selectedResponse = responses[randomIndex];
    console.log('Resposta selecionada:', selectedResponse);
    return selectedResponse;
}

// Indicadores visuais melhorados
function showTypingIndicator() {
    // Remove indicador existente se houver
    hideTypingIndicator();

    const messagesContainer = document.getElementById('chatbot-messages');
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message bot-message typing-indicator';
    typingDiv.id = 'typing-indicator';
    typingDiv.innerHTML = `
        <div class="message-content">
            <span class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </span>
            Clara estÃ¡ digitando...
        </div>
    `;
    messagesContainer.appendChild(typingDiv);

    // Smooth scroll
    setTimeout(() => {
        messagesContainer.scrollTo({
            top: messagesContainer.scrollHeight,
            behavior: 'smooth'
        });
    }, 100);
}

function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}